/*
    Copyright Â© 2013 Pedro Cardoso Rodriguez

    coatldevbeans is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public License as published by
    the Free Software Foundation, either version 3 of the License, or any 
    later version.

    coatldevbeans is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public License
    along with coatldevbeans.  If not, see <http://www.gnu.org/licenses/>
 */
package com.coatldev.beans;

import java.awt.Color;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import javax.swing.JDialog;
import javax.swing.SwingConstants;
import javax.swing.border.LineBorder;

/**
 *
 * @author Pedro Cardoso Rdz
 * @version 0.23
 */
public class CalendarDlg extends JDialog {
    
    private GregorianCalendar calendario;
    private int tpSel; // tipo de seleccion donde 1=dia, 2=semana, 3=quincena
    private ArrayList<Celda> lista;
    private int year;
    private int mes;
    private String[] meses; 
    private int[] diasMes;
    private CalendarSel refSup;

    /**
     * Creates new form CalendarDlg
     */
    public CalendarDlg(java.awt.Frame parent, boolean modal, int tpSel, CalendarSel refSup) {
        super(parent, modal);
        initComponents();
        this.tpSel=tpSel;
        this.refSup=refSup;
        if(this.tpSel<1 || this.tpSel>3){ this.tpSel=1; }
        meses=new String[]{"Enero","Febrero","Marzo","Abril","Mayo","Junio","Julio","Agosto","Septiembre","Octubre","Noviembre","Diciembre"};
        calendario = new GregorianCalendar();
        lista=new ArrayList<Celda>();
        cargaMes(calendario.get(Calendar.MONTH),calendario.get(Calendar.YEAR),-1);
    }
    
    public void setTpSel(int tps){
        this.tpSel=tps;
        if(this.tpSel<1 || this.tpSel>3){ this.tpSel=1; }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        pnlCenter = new javax.swing.JPanel();
        pnlNorth = new javax.swing.JPanel();
        btnAnt = new javax.swing.JButton();
        lblMes = new javax.swing.JLabel();
        btnSig = new javax.swing.JButton();
        btnCerrar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(11, 11));
        setResizable(false);
        setUndecorated(true);

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        jPanel1.setLayout(new java.awt.BorderLayout());

        pnlCenter.setLayout(new java.awt.GridBagLayout());
        jPanel1.add(pnlCenter, java.awt.BorderLayout.CENTER);

        btnAnt.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnAnt.setForeground(new java.awt.Color(0, 0, 255));
        btnAnt.setText("<");
        btnAnt.setToolTipText("Mes anterior");
        btnAnt.setMargin(new java.awt.Insets(2, 6, 2, 6));
        btnAnt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAntActionPerformed(evt);
            }
        });
        btnAnt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                btnAntKeyPressed(evt);
            }
        });

        lblMes.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblMes.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblMes.setText("Mes");

        btnSig.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnSig.setForeground(new java.awt.Color(0, 0, 255));
        btnSig.setText(">");
        btnSig.setToolTipText("Mes siguiente");
        btnSig.setMargin(new java.awt.Insets(2, 6, 2, 6));
        btnSig.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSigActionPerformed(evt);
            }
        });
        btnSig.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                btnSigKeyPressed(evt);
            }
        });

        btnCerrar.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnCerrar.setForeground(new java.awt.Color(255, 0, 0));
        btnCerrar.setText("X");
        btnCerrar.setMargin(new java.awt.Insets(1, 3, 1, 3));
        btnCerrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCerrarActionPerformed(evt);
            }
        });
        btnCerrar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                btnCerrarKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout pnlNorthLayout = new javax.swing.GroupLayout(pnlNorth);
        pnlNorth.setLayout(pnlNorthLayout);
        pnlNorthLayout.setHorizontalGroup(
            pnlNorthLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlNorthLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnAnt)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblMes, javax.swing.GroupLayout.DEFAULT_SIZE, 134, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnSig)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnCerrar))
        );
        pnlNorthLayout.setVerticalGroup(
            pnlNorthLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlNorthLayout.createSequentialGroup()
                .addGroup(pnlNorthLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlNorthLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(pnlNorthLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnAnt)
                            .addComponent(btnSig)
                            .addComponent(lblMes)))
                    .addComponent(btnCerrar))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel1.add(pnlNorth, java.awt.BorderLayout.PAGE_START);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents
    
    private void btnAntActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAntActionPerformed
        int m=(mes-1==-1?11:mes-1);
        int y=(m==11?year-1:year);
        cargaMes(m,y,-1);
    }//GEN-LAST:event_btnAntActionPerformed

    private void btnAntKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_btnAntKeyPressed
        int key=evt.getKeyCode();
        if(key==java.awt.event.KeyEvent.VK_ESCAPE){ setVisible(false); }
    }//GEN-LAST:event_btnAntKeyPressed

    private void btnSigActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSigActionPerformed
        int m=(mes+1==12?0:mes+1);
        int y=(m==0?year+1:year);
        cargaMes(m,y,-1);
    }//GEN-LAST:event_btnSigActionPerformed

    private void btnSigKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_btnSigKeyPressed
        int key=evt.getKeyCode();
        if(key==java.awt.event.KeyEvent.VK_ESCAPE){ setVisible(false); }
    }//GEN-LAST:event_btnSigKeyPressed

    private void btnCerrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCerrarActionPerformed
        setVisible(false);
    }//GEN-LAST:event_btnCerrarActionPerformed

    private void btnCerrarKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_btnCerrarKeyPressed
        int key=evt.getKeyCode();
        if(key==java.awt.event.KeyEvent.VK_ESCAPE){ setVisible(false); }
    }//GEN-LAST:event_btnCerrarKeyPressed

    /** Agrega una nueva celda a la cuadricula 
     * @param tx texto a mostrar
     * @param tpC Alineacion de texto 0=iz1q, 1=centro, 2=der 
     * @param t si representa el dia de hoy (today)
     * @param b color de fondo
     * @param x coordenada x
     * @param y coordenada y
     * @param bor si se dibuja borde
     * @param sel si es seleccionable
     * @param m el numero de mes 0-11
     * @param yy el anyo
     * @return el indice en la lista de la nueva celda
     */
    private int agregaCelda(String tx, int tpC, boolean t, Color b, int x, int y,boolean bor,boolean sel,int m,int yy){
        GridBagConstraints gbc=new GridBagConstraints();
        Celda celda;
        gbc.gridx=x; gbc.gridy=y;
        gbc.insets=new Insets(0,0,2,1);
        gbc.fill=GridBagConstraints.HORIZONTAL;
        celda=new Celda(tx,tpC,t,b,bor,sel,lista.size(),y,m,yy);
        ((GridBagLayout)pnlCenter.getLayout()).setConstraints(celda, gbc);
        pnlCenter.add(celda);
        lista.add(celda);
        return lista.size()-1;
    }
    
    public void cargaFecha(int y, int m, int d){
        selecciona(lista.get(cargaMes(m,y,d)));
    }
    
    /** 
     * @param mes El mes a cargar de 0 a 11
     * @param yy El aÃ±o correspondiente al mes a cargar
     * @param dSel El dia a seleccionar para cargaFecha
     * @return el indice de lista en el cual queda el dSel
     */
    private int cargaMes(int mm, int yy, int dSel){
        diasMes=new int[]{31,28,31,30,31,30,31,31,30,31,30,31};
        int dia=-1;
        int aux;
        int reg=1;
        int retrn=-1;
        calendario = new GregorianCalendar();
        if(mm==calendario.get(Calendar.MONTH) && yy==calendario.get(Calendar.YEAR)){
            dia=calendario.get(Calendar.DAY_OF_MONTH);
        }
        calendario.set(yy,mm,1);
        if(calendario.isLeapYear(yy)){ diasMes[1]=29; }
        year=yy; mes=mm;
        lblMes.setText(meses[mm]+" "+yy);
        pnlCenter.removeAll(); lista.clear();
        agregaCelda(" DOM ",2,false,Color.WHITE,0,0,true,false,mes,year);
        agregaCelda(" LUN ",2,false,Color.WHITE,1,0,true,false,mes,year);
        agregaCelda(" MAR ",2,false,Color.WHITE,2,0,true,false,mes,year);
        agregaCelda(" MIE ",2,false,Color.WHITE,3,0,true,false,mes,year);
        agregaCelda(" JUE ",2,false,Color.WHITE,4,0,true,false,mes,year);
        agregaCelda(" VIE ",2,false,Color.WHITE,5,0,true,false,mes,year);
        agregaCelda(" SAB ",2,false,Color.WHITE,6,0,true,false,mes,year);
        aux=calendario.get(Calendar.DAY_OF_WEEK)-1;
        if(aux>0){
            for(int d=0,k=(diasMes[(mm==0?11:mm-1)]-aux+1);d<aux;d++,k++){
                agregaCelda(""+k,3,false,new Color(255,255,255),d,reg,false,false,(mes-1>-1?mes-1:11),(mes==0?year-1:year));
            }
        }
        for(int d=1,v;d<=diasMes[mm];d++){
            v=agregaCelda(""+d,3,d==dia,new Color(180,240,243),aux++,reg,false,true,mes,year);
            if(d==dSel){ retrn=v; }
            if(aux==7){ aux=0; reg++; }
        }
        if(aux<7 && aux>0){
            for(int d=1;aux<7;d++){
                agregaCelda(""+d,3,false,new Color(255,255,255),aux++,reg,false,false,(mes+1<12?mes+1:0),(mes==11?year+1:year));
            }
        }
        pack(); validate(); return retrn;
    }
    
    private void resalta(boolean sel, Celda c){
        int c1=-1;
        int c2=-1;
        if(tpSel==1){ c1=c.getIdxLista(); c2=c1; }
        else if(tpSel==2){ c1=c.getIdxLista()-c.getDiaSema(); c2=c1+6; }
        else if(tpSel==3){
            if(c.getDia()<16){ c1=c.getIdxLista()-c.getDia()+1; c2=c1+14; }
            else{ c1=c.getIdxLista()-c.getDia()+16; c2=c1+(diasMes[mes]-16); }
        }
        for(int k=c1;k<=c2;k++){
            c=lista.get(k);
            if(sel){
                c.setBorder(new LineBorder(Color.BLACK,1,true));
                c.setHorizontalAlignment(SwingConstants.CENTER);
            }
            else{
                c.setBorder(null);
                c.setHorizontalAlignment(SwingConstants.RIGHT);
            }
        }
        validate();
    }
    
    private void selecciona(Celda c){
        int c1;
        int c2;
        java.util.ArrayList<Date> fechas=new java.util.ArrayList<Date>();
        String rep="";
        String[] ords={"1ra","2da","3ra","4ta","5ta","6ta"};
        Calendar cal=Calendar.getInstance();
        if(tpSel==1){
            cal.set(c.getYear(),c.getMes(),c.getDia());
            fechas.add(cal.getTime());
            rep=c.getNomDia()+" "+c.getDia()+"-"+meses[mes].substring(0,3).toUpperCase()+"-";
        }
        else if(tpSel==2){
            c1=c.getIdxLista()-c.getDiaSema(); c2=c1+6; c=(lista.get(c1));
            rep=ords[c.getNumSema()-1]+" Semana "+meses[mes].substring(0,3).toUpperCase()+"-";
            for(int h=c1;h<=c2;h++){
                c=(lista.get(h));
                cal.set(c.getYear(),c.getMes(),c.getDia());
                fechas.add(cal.getTime());
            }
        }
        else if(tpSel==3){
            if(c.getDia()<16){ c1=c.getIdxLista()-c.getDia()+1; c2=c1+14; }
            else{ c1=c.getIdxLista()-c.getDia()+16; c2=c1+(diasMes[mes]-16); }
            c=lista.get(c1);
            rep=ords[(c.getDia()<16?0:1)]+" Quincena "+meses[mes].substring(0,3).toUpperCase()+"-";
            for(int h=c1;h<=c2;h++){
                c=(lista.get(h));
                cal.set(c.getYear(),c.getMes(),c.getDia());
                fechas.add(cal.getTime());
            }
        }
        setVisible(false);
        refSup.setDates(rep+year,fechas);
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAnt;
    private javax.swing.JButton btnCerrar;
    private javax.swing.JButton btnSig;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel lblMes;
    private javax.swing.JPanel pnlCenter;
    private javax.swing.JPanel pnlNorth;
    // End of variables declaration//GEN-END:variables

    private class Celda extends javax.swing.JLabel implements MouseListener{
        
        private int idxLista;
        private int numSema;
        private int mes;
        private int yy;
        
        /** Crea una nueva celda
         * @param txt El texto a desplegar
         * @param al la alineacion donde 0=izq, 1=centro y 2=der
         * @param isToday indica si la celda representa el dia de hoy
         * @param b Color de fondo
         * @param bor Dibujar borde
         * @param sel Selectable
         * @param idxLst indice en la lista
         * @param ns numero de semana del mes
         * @param m numero de mes 0-11
         * @param y anyo
         */
        public Celda(String txt, int al, boolean isToday, Color b, boolean bor, boolean sel, int idxLst, int ns, int m,int y){
            super(txt,(al==1?SwingConstants.LEFT:(al==2?SwingConstants.CENTER:SwingConstants.RIGHT)));
            idxLista=idxLst; numSema=ns; mes=m; yy=y;
            setOpaque(true);
            setBackground(b);
            if(isToday){
                setBackground(new Color(43,43,43));
                setForeground(Color.WHITE);
            }
            if(bor){ setBorder(new LineBorder(Color.GRAY,1,true)); }
            if(sel){ addMouseListener(this); }
        }

        @Override
        public void mouseClicked(MouseEvent e) {
            selecciona(this);
        }

        @Override
        public void mousePressed(MouseEvent e) {}

        @Override
        public void mouseReleased(MouseEvent e) {}

        @Override
        public void mouseEntered(MouseEvent e) {
            resalta(true,this);
        }

        @Override
        public void mouseExited(MouseEvent e) {
            resalta(false,this);
        }
        
        public int getDiaSema(){
            calendario = new GregorianCalendar();
            calendario.set(year,mes,getDia());
            return calendario.get(Calendar.DAY_OF_WEEK)-1;
        }
        
        public String getNomDia(){
            String[] ds={"Dom","Lun","Mar","Mie","Jue","Vie","Sab"};
            calendario = new GregorianCalendar();
            calendario.set(year,mes,getDia());
            return ds[calendario.get(Calendar.DAY_OF_WEEK)-1];
        }
        
        public int getDia(){
            int dia;
            try{ dia=Integer.parseInt(getText()); }
            catch(NumberFormatException nbfExc){ dia=-1; }
            return dia;
        }
        
        public int getIdxLista(){ return idxLista; }
        
        public int getNumSema(){ return numSema; }
        
        public int getMes(){ return mes; }
        
        public int getYear(){ return yy; }
    }    
    
}
